-- psql -h ec2-3-209-124-113.compute-1.amazonaws.com
--  -p 5432 -U xqitmixuqtqmlc d80bjivi2afemf

--  d80bjivi2afemf=> CREATE TABLE "users"(
-- d80bjivi2afemf(> "id" SERIAL PRIMARY KEY,
-- d80bjivi2afemf(> "email" TEXT NOT NULL UNIQUE,
-- d80bjivi2afemf(> "password" TEXT NOT NULL);
-- CREATE TABLE
-- d80bjivi2afemf=> CREATE TABLE "teachers"(
-- d80bjivi2afemf(> "id" SERIAL PRIMARY KEY,
-- d80bjivi2afemf(> "name" TEXT NOT NULL UNIQUE);
-- CREATE TABLE
-- d80bjivi2afemf=> CREATE TABLE "terms"(
-- d80bjivi2afemf(> "id" SERIAL PRIMARY KEY,
-- d80bjivi2afemf(> "number" INTEGER NOT NULL UNIQUE);
-- CREATE TABLE
-- d80bjivi2afemf=> CREATE TABLE "categories"(
-- d80bjivi2afemf(> "id" SERIAL PRIMARY KEY,
-- d80bjivi2afemf(> "name" TEXT NOT NULL UNIQUE);
-- CREATE TABLE
-- d80bjivi2afemf=> CREATE TABLE "disciplines"(
-- d80bjivi2afemf(> "id" SERIAL PRIMARY KEY,
-- d80bjivi2afemf(> "name" TEXT NOT NULL UNIQUE,
-- d80bjivi2afemf(> "termId" INTEGER NOT NULL REFERENCES "terms"("id"));
-- CREATE TABLE
-- CREATE TABLE "teachersDisciplines"(
-- d80bjivi2afemf(> "id" SERIAL PRIMARY KEY,
-- d80bjivi2afemf(> "teacherId" INTEGER NOT NULL REFERENCES "teachers"("id"),
-- d80bjivi2afemf(> "disciplineId" INTEGER NOT NULL REFERENCES "disciplines"("id"));
-- CREATE TABLE
-- d80bjivi2afemf=> CREATE TABLE "tests"(
-- d80bjivi2afemf(> "id" SERIAL PRIMARY KEY,
-- d80bjivi2afemf(> "name" TEXT NOT NULL,
-- d80bjivi2afemf(> "pdfUrl" TEXT NOT NULL,
-- d80bjivi2afemf(> "categoryId" INTEGER NOT NULL REFERENCES "categories"("id"),
-- d80bjivi2afemf(> "teacherDisciplineId" INTEGER NOT NULL REFERENCES "teachersDisciplines"("id"));
-- CREATE TABLE

-- generator client {
--   provider = "prisma-client-js"
-- }

-- datasource db {
--   provider = "postgresql"
--   url      = env("DATABASE_URL")
-- }

-- model categories {
--   id    Int     @id @default(autoincrement())
--   name  String  @unique
--   tests tests[]
-- }

-- model disciplines {
--   id                  Int                   @id @default(autoincrement())
--   name                String                @unique
--   termId              Int
--   terms               terms                 @relation(fields: [termId], references: [id], onDelete: NoAction, onUpdate: NoAction)
--   teachersDisciplines teachersDisciplines[]
-- }

-- model teachers {
--   id                  Int                   @id @default(autoincrement())
--   name                String                @unique
--   teachersDisciplines teachersDisciplines[]
-- }

-- model teachersDisciplines {
--   id           Int         @id @default(autoincrement())
--   teacherId    Int
--   disciplineId Int
--   disciplines  disciplines @relation(fields: [disciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction)
--   teachers     teachers    @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
--   tests        tests[]
-- }

-- model terms {
--   id          Int           @id @default(autoincrement())
--   number      Int           @unique
--   disciplines disciplines[]
-- }

-- model tests {
--   id                  Int                 @id @default(autoincrement())
--   name                String
--   pdfUrl              String
--   categoryId          Int
--   teacherDisciplineId Int
--   categories          categories          @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
--   teachersDisciplines teachersDisciplines @relation(fields: [teacherDisciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction)
-- }

-- model User {
--   id       Int    @id @default(autoincrement())
--   email    String @unique
--   password String

--   @@map("users")
-- }
